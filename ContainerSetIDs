#!/bin/bash

#   This script is utilized by the Ansible scripts

## Script processes /etc/subuid and /etc/subgid files and updates them to conform to our standards for the give user.
##  - Creates the user / group range as starting at a whole 100,000 number.


user=$1

function setSub() {
  file=$1
  echo "Processing file:  $file"
  last=$(tail -n1 /etc/subuid | awk -F: '{print $2}')
  lastUser=$(tail -n1 /etc/subuid | awk -F: '{print $1}')
  echo "Last user of /etc/subuid is: $lastUser" 

  if [[ $user != $lastUser ]];then
   echo "Last user of /etc/subuid is not our new user - $user"
  else  
    echo "/etc/subuid - calculating new value for user - $user"
    if [[ $last -lt 100000 ]]; then    
      $num4=100000 
    else
      if [[ $num4 -lt 1000000 ]]; then
        num4=$((1 * $last / 100000)) 
        num4Old=$((100000 * $num4))
      else 
        num4=$((10 * $last / 100000))
        num4Old=$((1000000 * $num4))
      fi
      # See if number was already at correct value, if so, nothing to do.
      echo "num4Old = $num4Old"
      if [[ $num4Old -eq $last ]]; then
	 return 0
      fi

#      echo "step 1 - $num4"
      num4=$((num4 + 1))
#      echo "step 2 - $num4"
      num4=$((num4 * 100000))
#      echo "step 3 - $num4"
    fi
    echo "The new number is $num4"
    sed '$d' < $file > /tmp/file.new
    mv $file /tmp/file.old
    mv /tmp/file.new $file

    
    # write the new entry:
    printf "%s\n" "$user:$num4:65536" >> $file
  fi
}


# Fix User's Subuid
fileUID=/etc/subuid
setSub "$fileUID"


# Fix Group's Subuid 
fileUID=/etc/subgid
setSub "$fileUID"

