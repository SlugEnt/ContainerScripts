#!/bin/bash


# Script queries all users of the Podman group.  All Podman rootless users must be a member of this group in order
# to be queried by this script.  

# Enable printing of debug messages
if [[ debug != "$1" ]]; then
  echo () { :; }
  shift
fi


users=$(awk -F':' '/podman/{print $4}' /etc/group)
printf "Podman users are:  $users"


userList=(${users//,/ })
declare -A containers 

echo ""
echo ""
echo "=============================================================="
echo "Retrieving Podman Containers for each user"
echo "=============================================================="

for i in "${userList[@]}"; do
  echo "--->  user: $i" 

  json=$(sudo -u $i podman ps  --format=json)
  #echo "$json"
  containers[$i]=$json
done

echo "--->  ${#containers[@]} Container Users were discovered"


# Output array
outPut=()


for key in "${!containers[@]}"; do
  echo ""
  echo ""
  echo "=============================================================="
  echo "Processing containers for $key"
  echo "=============================================================="

  value=${containers[$key]}
  #echo "container data........................................."
  # echo "$value"
  icount=$( jq length <<<  "$value")
  #printf "\n%s  %i\n" "--->  iCount:" "$icount"


  if [[ $icount -eq 0 ]]; then
    echo "--->  $key has no containers"
  else
     echo "--->   $key has containers"
     
    # Start parsing the JSON
    for (( j=0; j<$icount; j++))  
    do 
      echo "--> --: SubContainer  # $j"
      Id=$(jq -r ".[$j] .Id" <<< $value)
      createdAt=$(jq -r ".[$j] .CreatedAt" <<< $value)
      image=$(jq  -r ".[$j] .Image" <<< $value)
      names=$(jq -r ".[$j] .Names[0]" <<< $value)
      pid=$(jq -r ".[$j] .Pid" <<< $value)
      startedAt=$(jq -r  ".[$j] .StartedAt" <<< $value)
      state=$(jq -r ".[$j] .State" <<< $value)
      status=$(jq -r ".[$j] .Status" <<< $value)
##  Working on this
      portCount=$(jq -r ".[$j] .Ports | length" <<< $value)
      echo "PortCount: $portCount"

      ports=""
      for (( p=0; p<$portCount; p++));
      do
        hostPort=$(jq -r ".[$j].Ports[$p] .hostPort" <<< $value)
        containerPort=$(jq -r ".[$j].Ports[$p] .containerPort" <<< $value)
        protocol=$(jq -r ".[$j].Ports[$p] .protocol" <<< $value)

        if [[ $ports -eq "" ]]; then
          ports=$(printf "%s-->%s/%s" "$hostPort" "$containerPort" "$protocol")
        else
          ports=$(printf ",%s-->%s/%s" "$hostPort" "$containerPort" "$protocol")
        fi
      done
      
      
##  END
#      Id=$(echo $value | jq -r ".[$j] .Id")

      echo "--> --: ID        = $Id"
      echo "--> --: CreatedAt = $createdAt"
      echo "--> --: Image     = $image"
      echo "--> --: pid       = $pid"
      echo "--> --: StartedAt = $startedAt"
      echo "--> --: Status    = $status"
      echo "--> --: State     = $state"
      echo "--> --: Names     = $names"
      outputLine=$(printf "%-16s %-10s %-15s  %-20s %-.32s   %-20s  %s" "$names" "$state" "$status" "$createdAt" "$image" "$ports" "$Id" )
      outPut+=( "$outputLine" )
     
    done
  fi
done

# Print Header
printf "\n%-16s %-10s %-15s  %-20s %-32s   %-20s  %s\n" "Container" "Status" "Up Time" "Created At" "Image Source" "Ports" "Container ID"
for l in "${outPut[@]}"; do
   printf "%s\n" "$l"
done
